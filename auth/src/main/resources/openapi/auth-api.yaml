openapi: 3.0.0
info:
  title: auth-api
  version: '1.0'
  description: Authentication service
  contact:
    name: Balint Jeszenszky
servers:
  - url: 'http://localhost/api/auth'
    description: docker
  - url: 'http://localhost:8080/api/auth'
    description: local
paths:
  /register:
    post:
      summary: ''
      operationId: post-register
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDto'
        '400':
          description: Bad Request
        '409':
          description: Conflict
      tags:
        - register
      description: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
  '/user/{id}':
    get:
      summary: Your GET endpoint
      tags:
        - user-management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDto'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: get-user
      description: Get user details
      parameters: []
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-user-id
      responses:
        '204':
          description: No Content
      description: Delete user
      tags:
        - user-management
    put:
      summary: ''
      operationId: put-user-id
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDto'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
      description: Edit user data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      tags:
        - user-management
    patch:
      summary: ''
      operationId: patch-user-id
      responses:
        '202':
          description: Accepted
      description: Change profile picture
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfilePictureDto'
      tags:
        - user-management
  /register/validate:
    get:
      summary: Your GET endpoint
      tags:
        - register
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
      operationId: get-register-validate
      description: Email verification
      parameters:
        - schema:
            type: string
          in: query
          name: key
          required: true
    parameters: []
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDetailsDto'
        '401':
          description: Unauthorized
      description: Send login information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentialsDto'
        description: Login credentials
      tags:
        - login
  /passwordReset:
    post:
      summary: ''
      operationId: post-forgotPassword
      responses:
        '202':
          description: Accepted
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDto'
        description: Password reset by email
      tags:
        - password-reset
      description: Send email with password reset link
    put:
      summary: ''
      operationId: put-forgotPassword
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '404':
          description: Not Found
      description: Reset the password with the key
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetDto'
      tags:
        - password-reset
    parameters: []
  /login/refresh:
    post:
      summary: ''
      operationId: post-login-refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewTokenDto'
        '401':
          description: Unauthorized
      description: Get new access token with refresh token
      tags:
        - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
  '/publicUser/{id}':
    get:
      summary: Your GET endpoint
      tags:
        - user-management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDetailsDto'
        '404':
          description: Not Found
      operationId: get-publicUser
      description: Get public user details
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  /login/details:
    post:
      summary: ''
      operationId: post-login-details
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsDto'
        '401':
          description: Unauthorized
      description: Get user details by token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenDto'
      tags:
        - login
  '/publicUser/find/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDetailsDto'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDetailsDto'
      operationId: get-publicUser-find-username
      description: get user by name
      tags:
        - user-management
  '/publicUser/search/{query}':
    parameters:
      - schema:
          type: string
        name: query
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - user-management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicUserDetailsDto'
      operationId: get-publicUser-search-query
      description: search for users by name
components:
  schemas:
    UserDetailsDto:
      title: UserDetailsDto
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        roles:
          type: array
          uniqueItems: true
          items:
            type: string
        profilePicture:
          type: string
      required:
        - id
        - username
        - firstname
        - lastname
        - email
        - roles
    RegisterDto:
      title: RegisterDto
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
      required:
        - username
        - firstname
        - lastname
        - email
        - password
        - confirmPassword
    UpdateUserDto:
      title: UpdateUserDto
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        oldpassword:
          type: string
        newpassword:
          type: string
        confirmpassword:
          type: string
      required:
        - firstname
        - lastname
        - email
    LoginDetailsDto:
      title: LoginDetailsDto
      type: object
      description: ''
      properties:
        userDetails:
          $ref: '#/components/schemas/UserDetailsDto'
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - userDetails
        - accessToken
        - refreshToken
    LoginCredentialsDto:
      title: LoginCredentialsDto
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    ForgotPasswordDto:
      title: ForgotPasswordDto
      type: object
      properties:
        email:
          type: string
      required:
        - email
    NewTokenDto:
      title: NewTokenDto
      type: object
      description: ''
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
    RefreshTokenDto:
      title: RefreshTokenDto
      type: object
      properties:
        token:
          type: string
      required:
        - token
    PublicUserDetailsDto:
      title: PublicUserDetailsDto
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        profilePicture:
          type: string
      required:
        - id
        - username
        - firstname
        - lastname
    AccessTokenDto:
      title: AccessTokenDto
      type: object
      properties:
        accessToken:
          type: string
      required:
        - accessToken
    PasswordResetDto:
      title: PasswordResetDto
      type: object
      properties:
        newPassword:
          type: string
        confirmPassword:
          type: string
        key:
          type: string
      required:
        - newPassword
        - confirmPassword
        - key
    ProfilePictureDto:
      title: ProfilePictureDto
      type: object
      properties:
        name:
          type: string
  securitySchemes: {}
tags:
  - name: register
  - name: user-management
  - name: login
  - name: password-reset
